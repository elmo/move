# config/initializers/content_security_policy.rb

Rails.application.config.content_security_policy do |policy|
  policy.default_src :self, :https
  policy.font_src    :self, :https, :data
  policy.img_src     :self, :https, :data
  policy.object_src  :none
  # IMPORTANT CHANGE HERE: Added :unsafe_hashes
  policy.script_src  :self, :https, "https://js.stripe.com", "https://newassets.hcaptcha.com", :unsafe_inline, :unsafe_eval, :unsafe_hashes
  # :unsafe_eval is often needed by some libraries, including potentially hCaptcha or older UJS.
  # Stripe Elements also injects some inline styles, so :unsafe_inline for style_src is often necessary.
  policy.style_src   :self, :https, :unsafe_inline, :unsafe_hashes
  # Ensure connect_src includes all necessary Stripe and hCaptcha domains
  policy.connect_src :self, "https://api.stripe.com", "https://checkout.stripe.com", "https://hcaptcha.com", "https://*.hcaptcha.com"
  # Ensure frame_src includes all necessary Stripe and hCaptcha domains for iframes
  policy.frame_src   :self, "https://js.stripe.com", "https://hooks.stripe.com", "https://newassets.hcaptcha.com", "https://b.stripecdn.com"

  # Keep nonce-based filtering for your *own* inline scripts generated by Rails helpers.
  # This is still good practice for your application's own code.
  Rails.application.config.content_security_policy_nonce_generator = -> request { SecureRandom.base64(16) }
  Rails.application.config.content_security_policy_nonce_directives = %w(script-src)

  # Report CSP violations (optional, but recommended for production)
  # policy.report_uri "/csp-violation-report-endpoint"
end
